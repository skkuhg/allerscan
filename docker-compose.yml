version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: allerscan-postgres-dev
    environment:
      POSTGRES_DB: allerscan_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d allerscan_dev"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - allerscan-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: allerscan-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - allerscan-network

  # API Backend
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: allerscan-api-dev
    environment:
      NODE_ENV: development
      PORT: 8000
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/allerscan_dev
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev-jwt-secret-key-not-for-production
      FRONTEND_URL: http://localhost:3000
      TAVILY_API_KEY: ${TAVILY_API_KEY}
    ports:
      - "8000:8000"
    volumes:
      - ./apps/api/src:/app/apps/api/src
      - ./packages:/app/packages
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - allerscan-network
    restart: unless-stopped

  # Web Frontend
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: allerscan-web-dev
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web/src:/app/apps/web/src
      - ./packages:/app/packages
      - /app/node_modules
    depends_on:
      - api
    networks:
      - allerscan-network
    restart: unless-stopped

  # Flask NLP Service
  nlp-service:
    build:
      context: ./services/flask-nlp
      dockerfile: Dockerfile
    container_name: allerscan-nlp-dev
    environment:
      FLASK_ENV: development
    ports:
      - "5000:5000"
    volumes:
      - ./services/flask-nlp/app:/app/app
    networks:
      - allerscan-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: allerscan-nginx-dev
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf
    depends_on:
      - web
      - api
      - nlp-service
    networks:
      - allerscan-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  allerscan-network:
    driver: bridge